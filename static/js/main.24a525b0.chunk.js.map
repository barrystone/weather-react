{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","process","App","useState","query","setQuery","weather","setWeather","fetching","fetch","then","res","json","result","console","log","window","onload","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","hour","getHours","minute","getMinutes","toString","length","dateBuilder","Date","Math","round","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0KACMA,EACCC,mCADDD,EAEE,2CAiHOE,MA/Gf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACRC,EADQ,KACDC,EADC,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KAGPC,EAAW,WACfC,MAAM,GAAD,OAAIT,EAAJ,qBAAyBI,EAAzB,+BAAqDJ,IAEvDU,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLN,EAAWM,GACXR,EAAS,IACTS,QAAQC,IAAIF,OAuDlB,OA/CAG,OAAOC,OAAS,WACdb,EAAQ,WAERI,KA6CA,yBACEU,UACyB,oBAAhBZ,EAAQa,MACXb,EAAQa,KAAKC,KAAO,GAClB,UAEF,OAGN,8BACE,yBAAKF,UAAU,cACb,2BACEG,KAAK,OACLH,UAAU,aACVI,YAAY,YACZC,SAAU,SAACC,GAAD,OAAOnB,EAASmB,EAAEC,OAAOC,QACnCA,MAAOtB,EACPuB,WAtEK,SAACC,GACE,UAAZA,EAAIC,KACNrB,QAuE0B,oBAAhBF,EAAQa,KACd,6BACE,yBAAKD,UAAU,gBACb,yBAAKA,UAAU,YACZZ,EAAQwB,KADX,IACkBxB,EAAQyB,IAAIC,SAE9B,yBAAKd,UAAU,QArEP,SAACe,GACnB,IAuBIC,EATO,CACT,SACA,SACA,UACA,WACA,WACA,SACA,YAEaD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EAzBS,CACX,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,WACA,SACA,WACA,YAaiBL,EAAEM,YACjBC,EAAOP,EAAEQ,cACTC,EAAOT,EAAEU,WACTC,EAASX,EAAEY,aAWf,OAREH,EAFEA,EAAO,GAEF,OADPA,GAAQ,IAGD,MAAQA,EAEgB,IAA7BE,EAAOE,WAAWC,SACpBH,EAAS,IAAMA,GAGX,IAAN,OAAWF,EAAX,YAAmBE,EAAnB,YAA6BV,EAA7B,YAAoCE,EAApC,YAA4CE,EAA5C,YAAqDE,GA6BpBQ,CAAY,IAAIC,QAEzC,yBAAK/B,UAAU,eACb,yBAAKA,UAAU,QACZgC,KAAKC,MAA0B,GAApB7C,EAAQa,KAAKC,MAAa,GADxC,YAGA,yBAAKF,UAAU,WAAWZ,EAAQA,QAAQ,GAAGa,QAIjD,yBAAKD,UAAU,eACb,qDChGQkC,QACW,cAA7BpC,OAAOqC,SAASC,UAEe,UAA7BtC,OAAOqC,SAASC,UAEhBtC,OAAOqC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpD,MAAK,SAAAqD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,a","file":"static/js/main.24a525b0.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nconst api = {\r\n  key: process.env.REACT_APP_OPENWEATHER_API_KEY,\r\n  base: \"https://api.openweathermap.org/data/2.5/\",\r\n};\r\nfunction App() {\r\n  var [query, setQuery] = useState(\"\");\r\n  const [weather, setWeather] = useState({});\r\n  const fetching = () => {\r\n    fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\r\n      // fetch(`${api.base}weather?q=${query}&appid=${api.key}`)\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        setWeather(result);\r\n        setQuery(\"\");\r\n        console.log(result);\r\n      });\r\n  };\r\n  const search = (evt) => {\r\n    if (evt.key === \"Enter\") {\r\n      fetching();\r\n    }\r\n  };\r\n  window.onload = function () {\r\n    query = \"pIngtung\";\r\n    // query = \"tung\";\r\n    fetching();\r\n  };\r\n  const dateBuilder = (d) => {\r\n    let months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"Aguest\",\r\n      \"Setember\",\r\n      \"Otober\",\r\n      \"november\",\r\n      \"December\",\r\n    ];\r\n    let days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wenesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n    ];\r\n    let day = days[d.getDay()];\r\n    let date = d.getDate();\r\n    let month = months[d.getMonth()];\r\n    let year = d.getFullYear();\r\n    let hour = d.getHours();\r\n    let minute = d.getMinutes();\r\n    if (hour > 12) {\r\n      hour -= 12;\r\n      hour = \"PM \" + hour;\r\n    } else {\r\n      hour = \"AM \" + hour;\r\n    }\r\n    if (minute.toString().length === 1) {\r\n      minute = \"0\" + minute;\r\n    }\r\n    // ${Object.keys(minute).length}${minute.toString().length}\r\n    return ` ${hour}:${minute} ${day} ${date} ${month} ${year}`;\r\n  };\r\n  return (\r\n    <div\r\n      className={\r\n        typeof weather.main != \"undefined\"\r\n          ? weather.main.temp > 16\r\n            ? \"app bg2\"\r\n            : \"app\"\r\n          : \"app\"\r\n      }\r\n    >\r\n      <main>\r\n        <div className=\"search-box\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"search-bar\"\r\n            placeholder=\"Search...\"\r\n            onChange={(e) => setQuery(e.target.value)}\r\n            value={query}\r\n            onKeyPress={search}\r\n          />\r\n        </div>\r\n        {typeof weather.main != \"undefined\" ? (\r\n          <div>\r\n            <div className=\"location-box\">\r\n              <div className=\"location\">\r\n                {weather.name} {weather.sys.country}\r\n              </div>\r\n              <div className=\"date\">{dateBuilder(new Date())}</div>\r\n            </div>\r\n            <div className=\"weather-box\">\r\n              <div className=\"temp\">\r\n                {Math.round(weather.main.temp * 10) / 10} ÌŠc\r\n              </div>\r\n              <div className=\"weather\">{weather.weather[0].main}</div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"notFind-box\">\r\n            <p>Not found the City</p>\r\n          </div>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}